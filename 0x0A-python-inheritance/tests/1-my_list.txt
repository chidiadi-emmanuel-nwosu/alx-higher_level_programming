The ``1-my_list`` module
========================

Using ``MyList``
----------------

First importing the module:

    >>> MyList = __import__('1-my_list').MyList

Inserting values:

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []



    >>> my_list = MyList([1, 2, 3, 4])
    >>> print(my_list)
    [1, 2, 3, 4]



    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(0) 
    >>> print(my_list)
    [1, 4, 3, 2, 0]
    >>> my_list.print_sorted
    <bound method MyList.print_sorted of [1, 4, 3, 2, 0]>
    >>> my_list.print_sorted()
    [0, 1, 2, 3, 4]
    >>> my_list
    [1, 4, 3, 2, 0]
    >>> my_list.remove(1)
    >>> my_list
    [4, 3, 2, 0]



    >>> my_list = MyList("A")
    >>> my_list.append("C")
    >>> my_list.append("B")
    >>> my_list
    ['A', 'C', 'B']
    >>> my_list.print_sorted()
    ['A', 'B', 'C']
   


    >>> my_list = MyList(None)
    Traceback (most recent call last):
	    ...
    TypeError: 'NoneType' object is not iterable



    >>> my_list = MyList()
    >>> my_list.append()
    Traceback (most recent call last):
	    ...
    TypeError: list.append() takes exactly one argument (0 given)



    >>> my_list = MyList()
    >>> my_list.append(1, 2)
    Traceback (most recent call last):
	    ...
    TypeError: list.append() takes exactly one argument (2 given)



    >>> my_list = MyList(1, 2)
    Traceback (most recent call last):
	    ...
    TypeError: list expected at most 1 argument, got 2
